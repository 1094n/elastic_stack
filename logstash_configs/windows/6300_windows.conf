# Author: Justin Henderson
# SANS Instructor and author of SANS SEC555: SIEM and Tactical Analytics
# Email: justin@hasecuritysolutions.com
# Last Update: 11/19/2017

filter {
  if [event_id] == 11 {
    grok {
      match => { "[event_data][TargetFilename]" => "\\(?<event_data.Filename>[a-z0-9\-_+=\[\]\{\}\.]+)\.(?<event_data.TargetExtension>[a-z0-9\-_+=\[\]\{\}\.]+)$" }
      tag_on_failure => ""
    }
    grok {
      match => { "[event_data][Image]" => "\\(?<event_data.ProcessName>[a-zA-Z0-9\-_+=\[\]\{\}\.]+\.[a-zA-Z0-9\-_+=\[\]\{\}\.]+)$" }
      tag_on_failure => ""
    }
    mutate {
      lowercase => [ "[event_data][ProcessName]", "[event_data][TargetExtension]" ]
    }
  }
  if [event_id] == 1 {
    grok {
      match => { "[event_data][CommandLine]" => "\\(?<event_data.ProcessName>[a-zA-Z0-9\-_+=\[\]\{\}\.]+\.[a-zA-Z0-9\-_+=\[\]\{\}\.]+)( )?%{GREEDYDATA:event_data.command_line_parameters}" }
      tag_on_failure => ""
    }
    if [event_data][command_line_parameters] {
      mutate {
        split => { "command_line_parameters" => " " }
      }
    }
  }
  if [event_data][Application] {
    grok {
      match => { "[event_data][Application]" => "\\device\\harddiskvolume%{INT}\\%{GREEDYDATA:ApplicationPath}" }
    }
    if [ApplicationPath] {
      mutate {
        add_field => { "ApplicationPathIgnoringx86" => "%{ApplicationPath}" }
      }
      mutate {
        gsub => [ "ApplicationPathIgnoringx86", "program files (x86)", "program files" ]
      }
    }
  }
  if [event_id] == 4634 {
    mutate {
      add_tag => [ "logoff" ]
    }
  }
  if [event_id] == 4624 or [event_id] == 528 or [event_id] == 540 or [event_id] == 552 or [event_id] == 682 or [event_id] == 4648 or [event_id] == 4778 {
    mutate {
      add_tag => [ "logon_success" ]
    }
  }
  if [event_data][WorkstationName] == "-" {
    mutate {
      add_tag => [ "empty_workstation_name" ]
    }
  }
  if [event_id] == 4624 {
    if [event_data][WorkstationName] != "-" and [event_data][WorkstationName] != "labmeinc.internal" {
      rest {
        request => {
          url => "http://freq_server:10004/measure/%{[event_data][WorkstationName]}"
        }
        sprintf => true
        json => false
        target => "workstation_name_frequency_score"
      }
      if [workstation_name_frequency_score] {
        mutate {
          convert => [ "workstation_name_frequency_score", "float" ]
        }
      }
    }
  }
  if [event_id] == 529 or [event_id] == 4625 or [event_id] == 530 or [event_id] == 531 or [event_id] == 532 or [event_id] == 533 or [event_id] == 534 or [event_id] == 535 or [event_id] == 536 or [event_id] == 536 or [event_id] == 537 or [event_id] == 538 or [event_id] == 539 or [event_id] == 4625 or [event_id] == 4771 {
    mutate {
      add_tag => [ "logon_failure" ]
    }
  }
  if [event_data][CommandLine]  {
    ruby {
      code => "event.set('command_line_length', event.get('[event_data][CommandLine]').length)"
    }
    grok {
      match => { "command_line" => "(?<possible_base64_code>[A-Za-z0-9+/]{50,}[=]{0,2})" }
      tag_on_failure => []
    }
  }
  if [source_name] == "Microsoft-Windows-AppLocker" {
    xml {
      source => "UserData"
      target => "applocker"
    }
    mutate {
      rename => [ "[applocker][FileHash]", "filehash" ]
      rename => [ "[applocker][FilePath]", "filepath" ]
      rename => [ "[applocker][Fqbn]", "fqbn" ]
      rename => [ "[applocker][PolicyName]", "policyname" ]
      rename => [ "[applocker][RuleId]", "ruleid" ]
      rename => [ "[applocker][RuleName]", "rulename" ]
      rename => [ "[applocker][RuleSddl]", "rulesddl" ]
      rename => [ "[applocker][TargetProcessId]", "targetprocessid" ]
      rename => [ "[applocker][TargetUser]", "user_sid" ]
    }
    if [event_id] == 8002 or [event_id] == 8005 {
      mutate {
        add_field =>  { "action" => "allow" } 
      }
    }
    if [event_id] == 8004 or [event_id] == 8007 {
      mutate {
        add_field =>  { "action" => "deny" } 
      }
    }
    if [event_id] == 8006 or [event_id] == 8003 {
      mutate {
        add_field =>  { "action" => "audit_deny" } 
      }
    }
    grok {
      match => { "Message" => "%{DATA:file} was allowed to run" }
      match => { "Message" => "%{DATA:file} was not allowed to run" }
      match => { "Message" => "%{DATA:file} was prevented from running" }
    }
    grok {
      match => { "file" => "\%%{DATA}\%%{GREEDYDATA:file_query}" }
    }
    if [file_query] {
      # Backslashes are odd to handle so convert to quad slash with single quotes and then remove single quotes
      mutate {
          gsub => [ "file_query", "[\\]", "'\\\\'" ]
      }
      mutate {
        gsub => [ "file_query", "'", "" ]
      }
      # Sleep for half a second to give correlation alert time to arrive first
      #sleep {
      #  time => "0.5"
      #}
      # Optional settings
      #elasticsearch {
      #  hosts => ["elasticsearch"]
      #  index => "winlogbeat-*"
      #  query => "source_name:Microsoft-Windows-Sysmon AND event_id:7 AND event_data.Image:%{[file_query]}"
      #  fields => [["@timestamp","match_date"],["event_data.Hashes","hashes"],["event_data.Signed","signed"],["event_data.Signature","signature"],["event_data.SignatureStatus","signature_status"],["event_data.ProcessId","process_id"]]
      #}
      mutate {
        remove_field => [ "file_query" ]
      }
    }
  }
  if [event_id] == 4103 and [source_name] == "Microsoft-Windows-PowerShell" {
    grok {
      match => { "context_info" => "\s+Severity = %{DATA:severity}\s+Host Name = %{DATA:shell_host_name}\s+Host Version = %{DATA:shell_host_version}\s+Host ID = %{DATA:shell_host_id}\s+Host Application = %{DATA:shell_host_application}\s+Engine Version = %{DATA:shell_engine_version}\s+Runspace ID = %{DATA:runspace_id}\s+Pipeline ID = %{INT:pipeline_id}\s+Command Name = %{DATA:command_name}\s+Command Type = %{DATA:command_type}\s+Script Name = %{DATA:Path}\s+Command Path = %{DATA:command_path}\s+Sequence Number = %{INT:sequence_number}\s+User = %{DATA:shell_user}\s+Connected User = %{DATA:connected_user}\s+Shell ID = %{GREEDYDATA:shell_id}" }
    }
    if [event_data][ShellHostApplication] {
      grok {
        match => { "[event_data][ShellHostApplication]" => "(?<possible_base64_code>[A-Za-z0-9+/]{50,}[=]{0,2})" }
        tag_on_failure => []
      }
      ruby {
        code => "event.set('shell_host_application_length', event.get('[event_data][ShellHostApplication]').length)"
      }
      mutate {
        convert => [ "shell_host_application_length", "integer" ]
      }
    }
  }
  if [event_id] == 4104 and [event_data][ScriptBlockText] and [source_name] == "Microsoft-Windows-PowerShell" {
    grok {
        match => { "[event_data][ScriptBlockText]" => "(?<possible_base64_code>[A-Za-z0-9+/]{50,}[=]{0,2})" }
        tag_on_failure => []
      }
      ruby {
        code => "event.set('script_block_text_length', event.get('[event_data][ScriptBlockText]').length)"
      }
      mutate {
        convert => [ "script_block_text_length", "integer" ]
      }
  }
  if [possible_base64_code] {
    mutate {
      add_tag => [ "possible_base64_encoding" ]
    }
    ruby {
      init => "require 'base64'"
      code => "a = Base64.decode64(event.get('possible_base64_code'));
                event.set('base64_decoded', a);"
    }
  }
  if [event_data][Payload] and [event_id] == 4103 and [source_name] == "Microsoft-Windows-PowerShell" {
    ruby {
      code => "event.set('cmdlets', event.get('[event_data][Payload]').downcase.scan(/commandinvocation\(([a-z0-9-]+)\)/))"
    }
  }
  if [event_data][CommandLine] {
    if [event_data][CommandLine]  =~ "iex" or [event_data][CommandLine]  =~ "Invoke-Expression" {
      mutate {
        add_tag => [ "ps_iex" ]
      }
    }
    if [event_data][CommandLine]  =~ "New-Object" and [event_data][CommandLine]  =~ "Net.WebClient" {
      mutate {
        add_tag => [ "ps_webclient" ]
      }
    }
  }
  if [event_data][ScriptBlockText]  {
    if [event_data][ScriptBlockText]  =~ "iex" or [event_data][ScriptBlockText]  =~ "Invoke-Expression" {
      mutate {
        add_tag => [ "ps_iex" ]
      }
    }
    if [event_data][ScriptBlockText]  =~ "New-Object" and [event_data][ScriptBlockText]  =~ "Net.WebClient" {
      mutate {
        add_tag => [ "ps_webclient" ]
      }
    }
  }
   
  if "ps_iex" not in [tags] and [base64_decoded] {
    mutate { add_tag => [ "test" ]  }
    grok {
      match => { "base64_decoded" => "(?<iex>iex)" }
    }
    if [base64_decoded] =~ "iex" or [base64_decoded] =~ "Invoke-Expression" {
      mutate { add_tag => [ "test2" ] }
      mutate {
        add_tag => [ "ps_iex" ]
      }
    }
  }
  if "ps_webclient" not in [tags] and [base64_decoded] {
    if [base64_decoded] =~ "New-Object" and [base64_decoded] =~ "Net.WebClient" {
      mutate {
        add_tag => [ "ps_webclient" ]
      }

    }
  }
   
  if "ps_iex" not in [tags] and [base64_decoded] {
    mutate { add_tag => [ "test" ]  }
    grok {
      match => { "base64_decoded" => "(?<iex>iex)" }
    }
    if [base64_decoded] =~ "iex" or [base64_decoded] =~ "Invoke-Expression" {
      mutate { add_tag => [ "test2" ] }
      mutate {
        add_tag => [ "ps_iex" ]
      }
    }
  }
  if "ps_webclient" not in [tags] and [base64_decoded] {
    if [base64_decoded] =~ "New-Object" and [base64_decoded] =~ "Net.WebClient" {
      mutate {
        add_tag => [ "ps_webclient" ]
      }
    }
  }
  if "ps_webclient" in [tags] and "ps_iex" in [tags] {
    mutate {
      add_tag => [ "alert_data", "ps_possible_web_code_use" ]
    }
  }
  # For any accounts that are service accounts or special accounts add the tag of service_account
  # This example applies the tag to any username that starts with SVC_.  If you use a different
  # standard change this.
  if "logoff" in [tags] or "logon_success" in [tags] or "logon_failure" in [tags] {
    if [event_data][TargetUserName] =~ "^DWM-*" or [event_data][TargetUserName] == "SYSTEM" or [event_data][TargetUserName] == "NETWORK SERVICE" or [event_data][TargetUserName] == "LOCAL SERVICE" or [event_data][TargetUserName] =~ "^SVC_*" {
      mutate {
        add_tag => [ "service_account" ]
      }
    }
    #Identify machine accounts
    if [event_data][TargetUserName] =~ /\$/ {
      mutate {
        add_tag => [ "machine", "noise" ]
      }
    }
  }
}
