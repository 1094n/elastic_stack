# Author: Justin Henderson
# Email: jhenderson@tekrefresh.comes
# Last Update: 11/16/2017
#
# This conf file is based on accepting logs for suricata json events
filter {
  if [log_event_type] == "suricata" {
    if [bytes_to_client] and [bytes_to_server] {
      if [bytes_to_client] < [bytes_to_server] {
        ruby {
          code => "event.set('byte_ratio_client', event.get('bytes_to_client').to_f / event.get('bytes_to_server').to_f)"
        }
        ruby {
          code => "event.set('byte_ratio_server', 1 - event.get('byte_ratio_client'))"
        }
      } else {
        ruby {
          code => "event.set('byte_ratio_server', event.get('bytes_to_server').to_f / event.get('bytes_to_client').to_f)"
        }
        ruby {
          code => "event.set('byte_ratio_client', 1 - event.get('byte_ratio_server'))"
        }
      }
      # OPTIONAL - LOOKUP DNS INFORMATION ON CERTAIN CONNECTIONS
      # Update elasticsearch host info for this to work
      # Requires logstash-filter-elasticsearch plugin
      #if [bytes_to_client] > 10000000 {
      #  elasticsearch {
      #    hosts => ["es_server_goes_here"]
      #    index => "logstash-bro-*"
      #    query => "event_type:dns AND answers:%{[destination_ip]}"
      #    fields => [["highest_registered_domain","highest_registered_domain"],["parent_domain","parent_domain"],["parent_domain_length","parent_domain_length"],["query","query"],["query_length","query_length"],["sub_domain","sub_domain"]]
      #  }
      #}
      #if [bytes_to_server] > 1000000 {
      #  elasticsearch {
      #    hosts => ["es_server_goes_here"]
      #    index => "logstash-bro-*"
      #    query => "type:dns AND answers:%{[destination_ip]}"
      #    fields => [["highest_registered_domain","highest_registered_domain"],["parent_domain","parent_domain"],["parent_domain_length","parent_domain_length"],["query","query"],["query_length","query_length"],["sub_domain","sub_domain"]]
      #  }
      #}
      #if [duration] > 14399 {
      #  elasticsearch {
      #    hosts => ["es_server_goes_here"]
      #    index => "logstash-bro-*"
      #    query => "type:dns AND answers:%{[destination_ip]}"
      #    fields => [["highest_registered_domain","highest_registered_domain"],["parent_domain","parent_domain"],["parent_domain_length","parent_domain_length"],["query","query"],["query_length","query_length"],["sub_domain","sub_domain"]]
      #  }
      #}
      #if [signature] !~ "SCAN" and [signature] !~ "POLICY" and [event_type] == "alert" {
      #  elasticsearch {
      #    hosts => ["es_server_goes_here"]
      #    index => "logstash-bro-*"
      #    query => "type:dns AND answers:%{[destination_ip]}"
      #    fields => [["highest_registered_domain","highest_registered_domain"],["parent_domain","parent_domain"],["parent_domain_length","parent_domain_length"],["query","query"],["query_length","query_length"],["sub_domain","sub_domain"]]
      #  }
      #}
    }
	# This will translate the alert.severity field into a severity field of either High, Medium, or Low
    if [event_type] == "alert" {
      if [severity] == 1 {
        mutate {
          add_field => { "severity_level" => "High" }
        }
      }
      if [severity] == 2 {
        mutate {
          add_field => { "severity_level" => "Medium" }
        }
      }
      if [severity] == 3 {
        mutate {
          add_field => { "severity_level" => "Low" }
        }
      }
      mutate {
        gsub => [ "sid", "\D", "" ]
        convert => [ "sid", "integer" ]
        convert => [ "gid", "integer" ]
      }
       # This extracts the signatures rule by looking up the rule by sid number on disk.
       if [gid] == 1 and [sid] > 0 and [sid] < 1000000000 {
         ruby {
           code => "sid = event.get('sid'); event.set('rule', `grep -h sid:#{sid} /etc/nsm/rules/*.rules`)"
         }
       }

	  # If the alert is a Snort GPL alert break it apart for easier reading and categorization
      if [signature] =~ "GPL " {
	    # This will parse out the category type from the alert
        grok {
          match => { "signature" => "GPL\s+%{DATA:category}\s" }
        }
		# This will store the category
        mutate {
          add_field => { "rule_type" => "Snort GPL" }
          lowercase => [ "category" ]
        }
      }
	  # If the alert is an Emerging Threat alert break it apart for easier reading and categorization
      if [signature] =~ "ET " {
	    # This will parse out the category type from the alert
        grok {
          match => { "signature" => "ET\s+%{DATA:category}\s" }
        }
		# This will store the category
        mutate {
          add_field => { "rule_type" => "Emerging Threats" }
          lowercase => [ "category" ]
        }
      }
      if [gid] == 1 and [sid] =~ '^[0-9]+$' {
        ruby {
          code => "sid = event.get('sid'); event.set('rule', `cat /etc/nsm/rules/*.rules | grep sid:#{sid}`)"
        } 
      }
      # If rule is extracted try to parse out important rule metadata
      if [rule] {
        grok {
          break_on_match => false
          match => { "rule" => "(?<ms_security_bulletin>MS[01][0-9]-[0-9]+)" }
          match => { "rule" => "cve,(?<cve>[0-9]{0,4}-[0-9]+)" }
          match => { "rule" => "bugtraq,(?<bugtraq>[0-9]+)" }
          match => { "rule" => "securityfocus.com/bid/(?<bid>[0-9]+)" }
          match => { "rule" => "osvdb/(?<osvdb>[0-9]+)" }
          match => { "rule" => "exploit-db.com/exploits/(?<exploit_db_id>[0-9]+)" }
          tag_on_failure => []
        }
      }
	  # This section adds URLs to lookup information about a rule online
      if [rule_type] == "Snort GPL" {
        mutate {
          add_field => [ "signature_info", "https://www.snort.org/search?query=%{gid}-%{sid}" ]
        }
      }
      if [rule_type] == "Emerging Threats" {
        mutate {
          add_field => [ "signature_info", "http://doc.emergingthreats.net/%{sid}" ]
        }
      }
    }
  }
}
